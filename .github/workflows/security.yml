name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans weekly on Mondays at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - codeql
          - dependencies
          - containers
          - secrets

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # CodeQL static analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'codeql' || github.event.inputs.scan_type == null
    
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript']
        include:
          - language: python
            path: 'services'
          - language: javascript
            path: 'docs'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup Python (for Python analysis)
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies (for Python analysis)
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Setup Node.js (for JavaScript analysis)
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json

      - name: Install JavaScript dependencies
        if: matrix.language == 'javascript'
        run: |
          cd docs && npm ci

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          upload: true

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == null
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit semgrep bandit
          pip install -r requirements-dev.txt

      - name: Run Safety (PyUp.io database)
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run pip-audit (OSV database)
        run: |
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: Run Bandit (security linting)
        run: |
          bandit -r services -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Semgrep (SAST)
        run: |
          semgrep --config=auto --json --output=semgrep-report.json services/
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-security-reports
          path: |
            safety-report.json
            pip-audit-report.json
            bandit-report.json
            semgrep-report.json
          retention-days: 30

      - name: Parse and summarize results
        if: always()
        run: |
          python3 << 'EOF'
          import json
          import os
          
          def load_json_safely(filepath):
              try:
                  with open(filepath, 'r') as f:
                      return json.load(f)
              except:
                  return {}
          
          # Parse Safety results
          safety_data = load_json_safely('safety-report.json')
          safety_issues = len(safety_data.get('vulnerabilities', []))
          
          # Parse pip-audit results  
          pip_audit_data = load_json_safely('pip-audit-report.json')
          pip_audit_issues = len(pip_audit_data.get('vulnerabilities', []))
          
          # Parse Bandit results
          bandit_data = load_json_safely('bandit-report.json')
          bandit_issues = len(bandit_data.get('results', []))
          
          # Parse Semgrep results
          semgrep_data = load_json_safely('semgrep-report.json')
          semgrep_issues = len(semgrep_data.get('results', []))
          
          # Create summary
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
              f.write("# Dependency Security Scan Results\\n\\n")
              f.write("## Summary\\n")
              f.write(f"- **Safety vulnerabilities**: {safety_issues}\\n")
              f.write(f"- **pip-audit vulnerabilities**: {pip_audit_issues}\\n") 
              f.write(f"- **Bandit security issues**: {bandit_issues}\\n")
              f.write(f"- **Semgrep findings**: {semgrep_issues}\\n\\n")
              
              # Add severity breakdown if available
              if safety_data.get('vulnerabilities'):
                  f.write("### Safety Vulnerabilities\\n")
                  for vuln in safety_data['vulnerabilities'][:5]:  # Top 5
                      f.write(f"- **{vuln.get('package_name')}**: {vuln.get('advisory')}\\n")
              
              if bandit_issues > 0:
                  f.write("\\n### Bandit Security Issues\\n")
                  severity_count = {}
                  for issue in bandit_data.get('results', []):
                      sev = issue.get('issue_severity', 'UNKNOWN')
                      severity_count[sev] = severity_count.get(sev, 0) + 1
                  
                  for severity, count in severity_count.items():
                      f.write(f"- **{severity}**: {count} issues\\n")
          
          # Set exit code based on high severity issues
          high_severity_count = 0
          
          # Count critical/high severity from various tools
          for vuln in safety_data.get('vulnerabilities', []):
              if vuln.get('severity', '').lower() in ['critical', 'high']:
                  high_severity_count += 1
                  
          for issue in bandit_data.get('results', []):
              if issue.get('issue_severity', '').lower() in ['high']:
                  high_severity_count += 1
          
          print(f"High severity issues found: {high_severity_count}")
          
          # Exit with error if high severity issues found (optional)
          # exit(1 if high_severity_count > 0 else 0)
          
          EOF

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == null
    
    strategy:
      matrix:
        service: [inference]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        run: |
          docker build -t scan-target:latest ./services/${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scan-target:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Run Trivy for JSON report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scan-target:latest'
          format: 'json'
          output: 'trivy-results-${{ matrix.service }}.json'

      - name: Parse Trivy results
        if: always()
        run: |
          python3 << 'EOF'
          import json
          import os
          
          service = "${{ matrix.service }}"
          
          try:
              with open(f'trivy-results-{service}.json', 'r') as f:
                  trivy_data = json.load(f)
          except:
              trivy_data = {}
          
          # Count vulnerabilities by severity
          severity_counts = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0}
          
          for result in trivy_data.get('Results', []):
              for vuln in result.get('Vulnerabilities', []):
                  severity = vuln.get('Severity', 'UNKNOWN')
                  if severity in severity_counts:
                      severity_counts[severity] += 1
          
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
              f.write(f"# Container Security Scan - {service}\\n\\n")
              f.write("## Vulnerability Summary\\n")
              for severity, count in severity_counts.items():
                  f.write(f"- **{severity}**: {count}\\n")
              f.write("\\n")
              
              # Add critical/high details
              critical_high = []
              for result in trivy_data.get('Results', []):
                  for vuln in result.get('Vulnerabilities', []):
                      if vuln.get('Severity') in ['CRITICAL', 'HIGH']:
                          critical_high.append(vuln)
              
              if critical_high:
                  f.write("### Critical/High Severity Vulnerabilities\\n")
                  for vuln in critical_high[:10]:  # Top 10
                      pkg = vuln.get('PkgName', 'Unknown')
                      title = vuln.get('Title', 'No title')
                      cve = vuln.get('VulnerabilityID', '')
                      f.write(f"- **{pkg}** ({cve}): {title}\\n")
          
          EOF

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-${{ matrix.service }}
          path: |
            trivy-results-${{ matrix.service }}.json
            trivy-results-${{ matrix.service }}.sarif
          retention-days: 30

  # Secret scanning (using custom patterns)
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == null
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive secret scanning

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Run TruffleHog secret scan
        run: |
          trufflehog git file://. --json --no-update > trufflehog-results.json
        continue-on-error: true

      - name: Install gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/

      - name: Run gitleaks secret scan
        run: |
          gitleaks detect --report-path gitleaks-results.json --report-format json
        continue-on-error: true

      - name: Parse secret scanning results
        if: always()
        run: |
          python3 << 'EOF'
          import json
          import os
          
          # Parse TruffleHog results
          trufflehog_secrets = 0
          try:
              with open('trufflehog-results.json', 'r') as f:
                  for line in f:
                      try:
                          json.loads(line)
                          trufflehog_secrets += 1
                      except:
                          pass
          except:
              pass
          
          # Parse gitleaks results
          gitleaks_secrets = 0
          try:
              with open('gitleaks-results.json', 'r') as f:
                  gitleaks_data = json.load(f)
                  gitleaks_secrets = len(gitleaks_data)
          except:
              pass
          
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
              f.write("# Secret Scanning Results\\n\\n")
              f.write(f"- **TruffleHog findings**: {trufflehog_secrets}\\n")
              f.write(f"- **Gitleaks findings**: {gitleaks_secrets}\\n\\n")
              
              if trufflehog_secrets > 0 or gitleaks_secrets > 0:
                  f.write("⚠️ **Potential secrets detected!** Please review the artifacts.\\n")
              else:
                  f.write("✅ **No secrets detected.**\\n")
          
          EOF

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            trufflehog-results.json
            gitleaks-results.json
          retention-days: 30

  # Consolidate security scan results
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, container-scan, secret-scan]
    if: always()
    
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-results/

      - name: Generate comprehensive security report
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results Overview" >> $GITHUB_STEP_SUMMARY
          
          # Job status summary
          echo "| Scan Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql-analysis.result }} | Static code analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-scan.result }} | Vulnerability scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| Containers | ${{ needs.container-scan.result }} | Container image scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ needs.secret-scan.result }} | Secret detection |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Artifacts summary
          echo "## Generated Security Reports" >> $GITHUB_STEP_SUMMARY
          find security-results -name "*.json" -o -name "*.sarif" | head -20 | while read file; do
            echo "- $(basename "$file")" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Download detailed reports from the Artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "3. Address high-priority security issues" >> $GITHUB_STEP_SUMMARY
          echo "4. Update dependencies and base images regularly" >> $GITHUB_STEP_SUMMARY

      - name: Check for critical security issues
        run: |
          # This step can be used to fail the workflow on critical issues
          # For now, we'll just report
          echo "Security scan completed. Review results in the Security tab."
          
          # Example: Fail on critical CodeQL findings (uncomment if desired)
          # if [[ "${{ needs.codeql-analysis.result }}" == "failure" ]]; then
          #   echo "Critical CodeQL findings detected!"
          #   exit 1
          # fi
